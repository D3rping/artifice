plugins {
	id 'fabric-loom' version '0.2.6-SNAPSHOT'
	id 'maven-publish'
}

apply from: "https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/publish/maven_base.gradle"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url "https://minecraft.curseforge.com/api/maven/" }
	maven { url 'http://maven.sargunv.s3-website-us-west-2.amazonaws.com/' }
}
minecraft {}

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modApi "net.fabricmc:fabric-loader:${project.loader_version}"

	testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.2"
	testImplementation "org.junit.jupiter:junit-jupiter-params:5.4.2"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:5.4.2"

	testmodImplementation sourceSets.main.output
	modRuntime("net.fabricmc.fabric-api:fabric-api-base:0.1.2+b7f9825de8") { transitive = false }
	modRuntime("net.fabricmc.fabric-api:fabric-networking-v0:0.1.7+12515ed9e8") { transitive = false }
	modRuntime("net.fabricmc.fabric-api:fabric-registry-sync-v0:0.2.5+12515ed9e8") { transitive = false }

	modRuntime "io.github.prospector:modmenu:1.7.15-unstable.19w46b+build.12"
//	modRuntime "foamfix-for-minecraft:foamfix:0.12.1"
	modRuntime "me.shedaniel:RoughlyEnoughItems:3.2.8-unstable.201911181133"
	modRuntime "me.sargunvohra.mcmods:auto-config:1.2.0+mc1.14.4"
    implementation 'org.testng:testng:6.9.6'
	implementation 'org.testng:testng:6.9.6'
}

test { useJUnitPlatform() }

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}
jar { from "LICENSE" }
